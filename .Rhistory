Reads_thresh = 50
Markerfile = 'positions.csv'
Quality_filter = TRUE
Quality_thresh = 30
Base_majority = .95
Pileupfile = 'out.pu'
require(mice)
header_names = c("chr", "name", "hg", "pos", "mut", "anc", "der")
marker_table = cc(read.table(Markerfile, col.names=header_names, fill=TRUE, na.strings=""))
pileup_table = read.table(Pileupfile, col.names=c('chr', 'pos', 'refbase', 'reads', 'align', 'quality'), fill=TRUE, na.strings='')
pileup_table = pileup_table[(pileup_table$chr %in% unique(marker_table$chr)) & pileup_table$reads > Reads_thresh, ]
marker_pileup = merge(marker_table, pileup_table)
getbase = function(mydat)
{
    myreads = strsplit(mydat$reads, '')
    myquality = strtoi(charToRaw(mydat$quality), 16L) - 33
    if(Quality_filter)
    {
        myreads = myreads[myquality > Quality_thresh]
    }
    reads_tab = table(myreads)
}
Reads_thresh = 50
Markerfile = 'positions.csv'
Quality_thresh = 30
Base_majority = .95
Outputfile = 'out.csv'
Pileupfile = 'tmp/out.pu'
options(stringsAsFactors = FALSE)
allow_base = c('a', 't', 'c', 'g', 'A', 'T', 'C', 'G', '.')
require(mice)
header_names = c("chr", "name", "hg", "pos", "mut", "anc", "der")
marker_table = read.table(Markerfile, col.names=header_names, fill=TRUE, na.strings="")
marker_table = cc(marker_table)
header_names = c('chr', 'pos', 'refbase', 'reads', 'align', 'quality')
pileup_table = read.table(Pileupfile, col.names=header_names, fill=TRUE, na.strings='')
chromotable = prop.table(table(pileup_table$chr))
chromotable
pileup_table = pileup_table[(pileup_table$chr %in% unique(marker_table$chr)) & pileup_table$reads > Reads_thresh, ]
marker_pileup = merge(marker_table, pileup_table)
marker_pileup$ANC = toupper(marker_pileup$anc)
marker_pileup$DER = toupper(marker_pileup$der)
marker_pileup$REFBASE = toupper(marker_pileup$refbase)
marker_pileup$ALIGN = toupper(marker_pileup$align)
getbase = function(mydat)
{
    myalign = strsplit(mydat[15], '')[[1]]
    myalign[myalign == ','] = '.'
    #tryCatch(coef(s)[2, 4], error = function(e) 1)
    myquality = strtoi(charToRaw(mydat[11]), 16L) - 33
    if(Quality_thresh > 0)
    {
        myalign = myalign[myquality > Quality_thresh]
    }
    align_tab = prop.table(table(myalign))
    max_perc = max(align_tab)
    max_base = names(align_tab)[which.max(align_tab)]
    if(max_perc < Base_majority | !(max_base %in% allow_base))
    {
        base = NA
    }
    else if(max_base == '.')
    {
        base = mydat[14]
    }
    else
    {
        base = max_base
    }
    res = c(base, max_base, max_perc, myalign)
    names(res) = c('base', 'max_base', 'max_perc', 'f_align')
    res
}
baseinfo = t(apply(marker_pileup, 1, getbase))
head(baseinfo)
names(marker_pileup)
marker_pileup[1,]
??icount
install.packages('iterators')
require(iterators)
?icount
x = iris[which(iris[, 5] != 'setosa'), c(1,5)]
head(x)
trials = 100
ptime = system.time({
require(foreach)
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
x= data.frame(a = 1:4, b = 3:6)
x
y = foreach(i=1:nrow(x), .combine=rbind) %do% {
diff = x[i, ]$a - x[i, ]$b
sum = x[i, ]$a + x[i, ]$b
res = c(diff, sum)
names(res) = c('diff', 'sum')
res
}
y
names(marker_pileup)
x = c('a', 'b')
x
do.call(paste, list(x), sep='')
do.call(paste, list(x))
paste(x, collapse='')
getbase = function(mydat)
{
    myalign = strsplit(mydat$ALIGN, '')[[1]]
    myalign[myalign == ','] = '.'
    #tryCatch(coef(s)[2, 4], error = function(e) 1)
    myquality = strtoi(charToRaw(mydat$quality), 16L) - 33
    if(Quality_thresh > 0)
    {
        myalign = myalign[myquality > Quality_thresh]
    }
    align_tab = prop.table(table(myalign))
    max_perc = max(align_tab)
    max_base = names(align_tab)[which.max(align_tab)]
    if(max_perc < Base_majority | !(max_base %in% allow_base))
    {
        base = NA
    }
    else if(max_base == '.')
    {
        base = mydat$REFBASE
    }
    else
    {
        base = max_base
    }
    myalign = paste(myalign, collapse='')
    res = c(base, max_base, max_perc, myalign)
    names(res) = c('base', 'max_base', 'max_perc', 'f_align')
    res
}
require(foreach)
baseinfo = foreach(i = 1:nrow(marker_pileup), .combine = rbind) %do% getbase(marker_pileup[i, ])
head(baseinfo)
names(baseinfo)
dim(baseinfo)
names(baseinfo) = c('base', 'max_base', 'max_perc', 'f_align')
dim(baseinfo)
names(baseinfo)
getbase = function(mydat)
{
    myalign = strsplit(mydat$ALIGN, '')[[1]]
    myalign[myalign == ','] = '.'
    #tryCatch(coef(s)[2, 4], error = function(e) 1)
    myquality = strtoi(charToRaw(mydat$quality), 16L) - 33
    if(Quality_thresh > 0)
    {
        myalign = myalign[myquality > Quality_thresh]
    }
    align_tab = prop.table(table(myalign))
    max_perc = max(align_tab)
    max_base = names(align_tab)[which.max(align_tab)]
    if(max_perc < Base_majority | !(max_base %in% allow_base))
    {
        base = NA
    }
    else if(max_base == '.')
    {
        base = mydat$REFBASE
    }
    else
    {
        base = max_base
    }
    myalign = paste(myalign, collapse='')
    data.frame(base=base, max_base=max_base, max_perc=max_perc, f_align=myalign)
}
x = 'bafdsa'
length(x)
nchar(x)
getbase = function(mydat)
{
    myalign = strsplit(mydat$ALIGN, '')[[1]]
    myalign[myalign == ','] = '.'
    #tryCatch(coef(s)[2, 4], error = function(e) 1)
    myquality = strtoi(charToRaw(mydat$quality), 16L) - 33
    if(Quality_thresh > 0)
    {
        myalign = myalign[myquality > Quality_thresh]
    }
    align_tab = prop.table(table(myalign))
    max_perc = max(align_tab)
    max_base = names(align_tab)[which.max(align_tab)]
    if(max_perc < Base_majority | !(max_base %in% allow_base))
    {
        base = NA
    }
    else if(max_base == '.')
    {
        base = mydat$REFBASE
    }
    else
    {
        base = max_base
    }
    myalign = paste(myalign, collapse='')
    data.frame(base=base, max_base=max_base, max_perc=max_perc, f_align=myalign, f_align_len=nchar(myalign))
}
require(foreach)
baseinfo = foreach(i = 1:nrow(marker_pileup), .combine = rbind) %do% getbase(marker_pileup[i, ])
dim(baseinfo)
head(baseinfo)[, 1:3]
head(baseinfo)[, 5]
head(baseinfo)[, 4]
marker_pileup = cbind(marker_pileup, baseinfo)
eqANC = (marker_pileup$base == marker_pileup$ANC)
eqDER = (marker_pileup$base == marker_pileup$DER)
marker_pileup$branch = ifelse(eqANC & eqDER, 'E', ifelse(eqANC, 'A', ifelse(eqDER, 'D', NA)))
marker_pileup$quality = paste('Q', marker_pileup$quality)
write.table(marker_pileup, file=Outputfile, sep='\t', quote=FALSE, row.names=FALSE)
write.table(chromotable, file=paste('chr_', Outputfile), sep='\t', quote=FALSE, row.names=FALSE)
write.table(marker_pileup, file=Outputfile, sep='\t', quote=FALSE, row.names=FALSE)
write.table(chromotable, file=paste('chr_', Outputfile, sep=''), sep='\t', quote=FALSE, row.names=FALSE)
marker_pileup$align
getbase = function(mydat)
{
    myalign = strsplit(mydat$ALIGN, '')[[1]]
    myalign[myalign == ','] = '.'
    #tryCatch(coef(s)[2, 4], error = function(e) 1)
    myquality = strtoi(charToRaw(mydat$quality), 16L) - 33
    if(Quality_thresh > 0)
    {
        myalign = myalign[myquality > Quality_thresh]
    }
    align_tab = prop.table(table(myalign))
    print(align_tab)
    max_perc = max(align_tab)
    max_base = names(align_tab)[which.max(align_tab)]
    if(max_perc < Base_majority | !(max_base %in% allow_base))
    {
        base = NA
    }
    else if(max_base == '.')
    {
        base = mydat$REFBASE
    }
    else
    {
        base = max_base
    }
    myalign = paste(myalign, collapse='')
    data.frame(base=base, max_base=max_base, max_perc=max_perc, f_align=myalign, f_align_len=nchar(myalign))
}
as.integer('3')
debug(getbase)
getbase(marker_pileup[2])
getbase(marker_pileup[2, ])
myalign
myalign
Q
getbase = function(mydat)
{
    myalign = strsplit(mydat$ALIGN, '')[[1]]
    myalign[myalign == ','] = '.'
    #tryCatch(coef(s)[2, 4], error = function(e) 1)
    myquality = strtoi(charToRaw(mydat$quality), 16L) - 33
    # if(Quality_thresh > 0)
    # {
    #     myalign = myalign[myquality > Quality_thresh]
    # }
    align_tab = prop.table(table(myalign))
    print(align_tab)
    max_perc = max(align_tab)
    max_base = names(align_tab)[which.max(align_tab)]
    if(max_perc < Base_majority | !(max_base %in% allow_base))
    {
        base = NA
    }
    else if(max_base == '.')
    {
        base = mydat$REFBASE
    }
    else
    {
        base = max_base
    }
    myalign = paste(myalign, collapse='')
    data.frame(base=base, max_base=max_base, max_perc=max_perc, f_align=myalign, f_align_len=nchar(myalign))
}
debug(getbase)
getbase(marker_pileup[2, ])
align_tab
Q
getbase(marker_pileup[32, ])
align_tab
Q
getbase(marker_pileup[q32, ])
Q
getbase(marker_pileup[232, ])
align_tab
Q
myalign = strsplit('actgactg..............,,,,...........,,,..+5aacct...+1a..-1t,,^*,,,,....$')
myalign = strsplit('actgactg..............,,,,...........,,,..+5aacct...+1a..-1t,,^*,,,,....$', sep='')[[1]]
myalign = strsplit('actgactg..............,,,,...........,,,..+5aacct...+1a..-1t,,^*,,,,....$', '')[[1]]
myalign
pluspos = which(myalign == '+')
pluspos
p0 = 42
p1 = 43
myalign[p0 + 1]
myalign[p0]
p0 = 43
myalign[p0]
myalign[p0 + 1]
p0 + 1 + as.integer(myalign[p0 + 1])
p1 = p0 + 1 + as.integer(myalign[p0 + 1])
myalign[p0:p1]
x = myalign
x[p0:01]
x[p0:p1]
x
x[p0:p1] = NULL
x[p0:p1] = rep(NULL, p1-p0+1)
x
x[-(p0:p1)]
savehistory()
Reads_thresh = 50
Markerfile = 'positions.csv'
Quality_thresh = 30
Base_majority = .95
Outputfile = 'out.csv'
Pileupfile = 'tmp/out.pu'
allow_base = c('a', 't', 'c', 'g', 'A', 'T', 'C', 'G', '.')
require(mice)
header_names = c("chr", "name", "hg", "pos", "mut", "anc", "der")
marker_table = read.table(Markerfile, col.names=header_names, fill=TRUE, na.strings="")
marker_table = cc(marker_table)
header_names = c('chr', 'pos', 'refbase', 'reads', 'align', 'quality')
pileup_table = read.table(Pileupfile, col.names=header_names, fill=TRUE, na.strings='')
x = data.frame(chr=c('chr1', 'chr1', 'chr2', 'chr2'), count=c(1,1,2,2))
x
require(plyr)
ddply(x, 'chr')
ddply(x, 'chr', sum)
ddply(x, x(chr), sum)
ddply(x, x(chr), summarise)

head(baseball)
split(x, chr)
split(x, x$chr)
require(foreach)
foreach(i=split(x, x$chr), .combine=c) %do% sum(i$count)
foreach(i=split(pileup_table, pileup_table$chr))
head(pileup_table)
head(pileup_table, 50)
tail(pileup_table, 50)
chromotable = foreach(i=split(pileup_table, pileup_table$chr), .combine=c) %do% sum(i$reads)
chromotable
dd



chromotable = ddply(pileup_table, .(chr), function(x) sum(x$reads))
colnames(chromotable)[2] = 'reads'
chromotable$perc = chromotable$reads / sum(chromotable$reads) * 100
